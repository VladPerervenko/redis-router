{"name":"Redis-router","tagline":"A redis sharding library/api for your sharding needs.","body":"redis-router\r\n============\r\n\r\n<strong>redis_router</strong>, a redis sharding library/api for your redis sharding needs.\r\n\r\n<img src=\"https://raw.github.com/emre/redis-router/master/workflow.png\">\r\n\r\nhow it works\r\n==============\r\n\r\n<a href=\"http://en.wikipedia.org/wiki/Consistent_hashing\">wikipedia/consistent_hashing</a>\r\n\r\n> Consistent hashing is a special kind of hashing. When a hash table is resized and consistent hashing is used,\r\n> only K/n keys need to be remapped on average, where K is the number of keys, and n is the number of slots.\r\n> In contrast, in most traditional hash tables, a change in the number of array slots causes\r\n> nearly all keys to be remapped.\r\n\r\nredis_router uses <a href=\"http://last.fm\">last.fm</a>'s <a href=\"https://github.com/RJ/ketama\">\r\nlibketama</a> in the back.</li>\r\n\r\ninstallation\r\n==========\r\n\r\ninstall <a href=\"https://github.com/RJ/ketama\">libketama/ketama_python </a> first.\r\n\r\nAfter that;\r\n\r\n```\r\npip install redis-router\r\n```\r\nor if you like 90s:\r\n\r\n```\r\neasy_install redis-router\r\n```\r\n\r\nor add redis_router directory to the your path.\r\n\r\n\r\nquick start\r\n============\r\n\r\n\r\nservers.txt (server:ip weight)\r\n``` \r\n127.0.0.1:6379 100\r\n127.0.0.1:6380 100\r\n```\r\n\r\nyour python code:\r\n\r\n``` python\r\nrouter = Router(\"servers.txt\")\r\n\r\nrouter.set(\"forge\", 13)\r\nrouter.set(\"spawning_pool\", 18)\r\n```\r\n\r\noutput with loglevel=DEBUG\r\n\r\n```\r\nDEBUG:key 'forge' hashed as 4113771093 and mapped to 127.0.0.1:6379\r\nDEBUG:key 'spawning_pool' hashed as 1434709819 and mapped to 127.0.0.1:6380\r\nDEBUG:key 'forge' hashed as 4113771093 and mapped to 127.0.0.1:6379\r\nDEBUG:key 'spawning_pool' hashed as 1434709819 and mapped to 127.0.0.1:6380\r\n13 6\r\n```\r\n\r\nredis_router as a server\r\n========================================\r\nIf you have clients using X programming language other than python, you can use HTTP or TCP interface to connect \r\nand send commands to redis_router.\r\n\r\nrunning TCP interface\r\n=======================\r\n\r\n``` python\r\nfrom redis_router.tcp_interface import RouterServer\r\n\r\nr = RouterServer('0.0.0.0', 5000)\r\nr.run()\r\n```\r\n\r\n<strong>playing with it</strong>\r\n```\r\n$ telnet localhost 5000\r\nTrying 127.0.0.1...\r\nConnected to localhost.\r\nEscape character is '^]'.\r\nset selam timu\r\nTrue\r\nget selam\r\ntimu\r\ndbsize\r\n13\r\n```\r\n\r\nHTTP API\r\n=============\r\n\r\n``` python\r\nfrom redis_router.http_interface import start_server\r\n\r\nstart_server('0.0.0.0', 5000)\r\n```\r\n\r\nexample request:\r\n\r\n* initialize a set with two members.\r\n\r\n``` bash\r\n$ curl -X POST --data \"command=sadd&arguments=teams,galatasaray,fenerbahce\" http://localhost:5000 \r\n```\r\n``` json\r\n{\r\n  \"response\": 2\r\n}\r\n```\r\n* get members\r\n\r\n``` bash\r\n$ curl -X POST --data \"command=smembers&arguments=teams\" http://localhost:5000\r\n```\r\n\r\n``` json\r\n{\r\n  \"response\": [\r\n    \"fenerbahce\", \r\n    \"galatasaray\"\r\n  ]\r\n}\r\n```\r\n\r\nrunning tests\r\n=================\r\n``` bash\r\n$ py.test tests.py \r\n=============================================== test session starts =========================\r\nplatform linux2 -- Python 2.7.3 -- pytest-2.3.4\r\ncollected 11 items \r\n\r\ntests.py ...........\r\n\r\n============================================ 11 passed in 0.33 seconds ======================\r\n```\r\n\r\nFAQ\r\n=========\r\n > Q: What about data invalidation if I move servers, change the config etc.\r\n\r\nIt's minimum. At least better than:\r\n```\r\nNode = Hash(key) MOD N\r\n```\r\n\r\n> Q: I want to see some stats about sharding efficiency.\r\n\r\nResults for 100.000 random keys.\r\n```\r\nresults: {\r\n    redis.client.Redis object at 0x8df75a4: 33558,\r\n    redis.client.Redis object at 0x8df7644: 31207,\r\n    redis.client.Redis object at 0x8df7504: 35235\r\n}\r\n```\r\n<img src=\"https://raw.github.com/emre/redis-router/master/shardacross.png\">\r\n\r\n> Q: Can I use this with PHP or [INSERT RANDOM LANGUAGE HERE]\r\n\r\nYes.\r\n\r\nThere are <a href=\"https://github.com/emre/redis-router/blob/master/redis_router/tcp_interface.py\">TCP server</a> \r\nand <a href=\"https://github.com/emre/redis-router/blob/master/redis_router/http_interface.py\">HTTP Server</a> options</a>. \r\nYou can always use libketama's implementations in your language though.\r\n\r\n\r\n \r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}